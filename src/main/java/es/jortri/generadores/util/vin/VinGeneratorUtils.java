package es.jortri.generadores.util.vin;

import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Random;
import java.util.stream.Stream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * Referencia: https://github.com/mkyrychenko/vin-utils
 */
public final class VinGeneratorUtils {
	
	private static final Logger logger = LoggerFactory.getLogger(VinGeneratorUtils.class);
	
    private static final Random RANDOM = new Random();
    private static final String PREFIXES_FILE_NAME = "vin-prefixes.txt";
    private static final String ALLOWED_CHARS = "0123456789ABCDEFGHJKLMNPRSTUVWXYZ";

    private VinGeneratorUtils() {
        throw new RuntimeException("Utility class should not be initialized");
    }

    /**
     * Generate random VIN
     *
     * @return randomly generated VIN
     */
    public static String getRandomVin() {
        final Vin vinYear = getRandomVinStart();
        final StringBuilder vinBuilder = new StringBuilder();

        vinBuilder.append(vinYear.getWmi());
        vinBuilder.append(vinYear.getVds());
        vinBuilder.append(getRandomVinChar());
        vinBuilder.append(vinYear.getYear());

        for (int i = 0; i < 7; i++) {
            vinBuilder.append(getRandomVinChar());
        }

        final String vin = vinBuilder.toString();

        try {
            final char checkSumChar = VinValidatorUtils.getVinCheckSumChar(vin);

            return vin.substring(0, 8) + Character.toString(checkSumChar) + vin.substring(9);
        } catch (InvalidVinException ignored) {
            // should never happen, because here we calculate checksum for VIN generated by us
            // but checksum calculation could throw exception for validation of foreign VIN
            return null;
        }
    }

    private static char getRandomVinChar() {
        // '33' is length of ALLOWED_CHARS
        return ALLOWED_CHARS.charAt(RANDOM.nextInt(33));
    }

    private static Vin getRandomVinStart() {
        // '62178' is a number of lines in the file; + 1 to avoid reading of first line
        final int lineToRead = RANDOM.nextInt(62177) + 1;

        //en vez de utilizar getSystemResource, utilizar getResource
        //En local funciona con la ultima de todas, pero esa no funcionaba en el servidor desplegado
        //Alguna de estas si... pero como no pinta los logs...una de ellas es
        URL url = VinGeneratorUtils.class.getClassLoader().getResource("/vin-prefixes.txt");
		if (url == null) {
			logger.info("No encuentra con " + "/vin-prefixes.txt");
			url = VinGeneratorUtils.class.getClassLoader().getResource("resources/vin-prefixes.txt");
			if (url == null) {
				logger.info("No encuentra con " + "resources/vin-prefixes.txt");
				url = VinGeneratorUtils.class.getClassLoader().getResource("/resources/vin-prefixes.txt");
			}
			if (url == null) {
				logger.info("No encuentra con " + "/resources/vin-prefixes.txt");
			}				
		}
		if (url == null) {
			url = VinGeneratorUtils.class.getClassLoader().getResource("vin-prefixes.txt");
		}
		
		if (url == null) {
			throw new RuntimeException("No encuentra el  " + "vin-prefixes.txt");
		}
        try (
        	//final Stream<String> stream = Files.lines(Paths.get(ClassLoader.getSystemResource(PREFIXES_FILE_NAME).toURI()))) {        	        
        	final Stream<String> stream= Files.lines(Paths.get(url.toURI()))){
        	
            final String line = stream.skip(lineToRead)
                    .findFirst()
                    .orElseThrow(() -> new RuntimeException("Problem occurred while read line " + lineToRead + " from " + PREFIXES_FILE_NAME));
            final String[] fields = line.split(" {3}");

            return new Vin(fields[0].trim(), fields[1].trim(), fields[2].trim());
        } catch (URISyntaxException | IOException | SecurityException e) {
            throw new RuntimeException("Problem occurred while reading " + PREFIXES_FILE_NAME, e);
        }
    }

    /**
     * Helper class used internally to save parts of VIN
     */
    private static class Vin {
        /**
         * WMI - (World Manufacturers Identification)
         */
        private final String wmi;

        /**
         * VDS (Vehicle Description Section)
         */
        private final String vds;

        /**
         * Year of model
         */
        private final String year;

        Vin(final String wmi,
            final String vds,
            final String year) {
            this.wmi = wmi;
            this.vds = vds;
            this.year = year;
        }

        String getWmi() {
            return this.wmi;
        }

        String getVds() {
            return this.vds;
        }

        String getYear() {
            return this.year;
        }
    }
}
